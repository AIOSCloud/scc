package main

import (
	"encoding/base64"
	"encoding/json"
	"fmt"
	"github.com/monochromegane/go-gitignore"
	"github.com/ryanuber/columnize"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"runtime"
	// "runtime/debug"
	"bytes"
	"strings"
	"sync"
)

type FileJob struct {
	Filename  string
	Extension string
	Location  string
	Content   []byte
	Bytes     int64
	Lines     int64
	Code      int64
	Comment   int64
	Blank     int64
}

const (
	database_languages = ``
)

var Exclusions = strings.Split("woff,eot,cur,dm,xpm,emz,db,scc,idx,mpp,dot,pspimage,stl,dml,wmf,rvm,resources,tlb,docx,doc,xls,xlsx,ppt,pptx,msg,vsd,chm,fm,book,dgn,blines,cab,lib,obj,jar,pdb,dll,bin,out,elf,so,msi,nupkg,pyc,ttf,woff2,jpg,jpeg,png,gif,bmp,psd,tif,tiff,yuv,ico,xls,xlsx,pdb,pdf,apk,com,exe,bz2,7z,tgz,rar,gz,zip,zipx,tar,rpm,bin,dmg,iso,vcd,mp3,flac,wma,wav,mid,m4a,3gp,flv,mov,mp4,mpg,rm,wmv,avi,m4v,sqlite,class,rlib,ncb,suo,opt,o,os,pch,pbm,pnm,ppm,pyd,pyo,raw,uyv,uyvy,xlsm,swf", ",")

var Exclusions2 = map[string]int{
	"rsc": 3711,
	"r":   2138,
	"gri": 1908,
	"adg": 912,
}

type Language struct {
	Extensions []string `json:"extensions"`
	Language   string   `json:"language"`
}

func loadDatabase() []Language {
	var database []Language
	data, _ := base64.StdEncoding.DecodeString(database_languages)
	_ = json.Unmarshal(data, &database)
	return database
}

/// Get all the files that exist in the directory
func walkDirectory(root string, output *chan *FileJob) {
	filepath.Walk(root, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if !info.Mode().IsRegular() {
			return nil
		}

		if !info.IsDir() {
			*output <- &FileJob{Location: path, Filename: info.Name()}
		}

		return nil
	})

	close(*output)
}

func fileReaderWorker(input *chan *FileJob, output *chan *FileJob) {
	var wg sync.WaitGroup
	for res := range *input {
		wg.Add(1)
		go func(res *FileJob) {
			extension := path.Ext(res.Filename)

			// TODO this should be a hashmap lookup for the speeds
			exclude := false
			for _, ex := range Exclusions {
				if strings.HasSuffix(res.Filename, ex) {
					exclude = true
				}
			}

			if !exclude {
				content, _ := ioutil.ReadFile(res.Location)
				res.Content = content
				res.Extension = extension
				*output <- res
			}

			wg.Done()
		}(res)
	}

	go func() {
		wg.Wait()
		close(*output)
	}()
}

func fileProcessorWorker(input *chan *FileJob, output *chan *FileJob) {
	var wg sync.WaitGroup
	for res := range *input {
		// Do some pointless work
		wg.Add(1)
		go func(res *FileJob) {
			//res.Lines = int64(len(strings.Split(string(res.Content), "\n"))) // this is slow
			// res.Lines = int64(strings.Count(string(res.Content), "\n")) // this is also slow
			res.Lines = int64(bytes.Count(res.Content, []byte("\n"))) // this is much faster than the above
			res.Blank = int64(bytes.Count(res.Content, []byte("\n\n")))
			res.Bytes = int64(len(res.Content))
			*output <- res
			wg.Done()
		}(res)
	}

	go func() {
		wg.Wait()
		close(*output)
	}()
}

func fileSummerize(input *chan *FileJob) {

	// Once done lets print it all out
	output := []string{
		"Language | Files | Lines | Code | Comment | Blank | Byte",
		"-------- | -------- | -------- | -------- | -------- | -------- | --------",
	}

	languages := map[string]int64{}
	database := loadDatabase()

	// TODO declare type to avoid cast
	sumFiles := int64(0)
	sumLines := int64(0)
	sumCode := int64(0)
	sumComment := int64(0)
	sumBlank := int64(0)
	sumByte := int64(0)

	for res := range *input {
		sumFiles++
		sumLines += res.Lines
		sumCode += res.Code
		sumComment += res.Comment
		sumBlank += res.Blank
		sumByte += res.Bytes

		// TODO this is SLOW refactor to use pre-generated hashmap lookups
		for _, language := range database {
			for _, extention := range language.Extensions {
				if res.Extension == "."+extention {
					_, ok := languages[language.Language]

					if ok {
						languages[language.Language] = languages[language.Language] + 1
					} else {
						languages[language.Language] = 1
					}
				}
			}
		}
	}

	for name, count := range languages {
		output = append(output, fmt.Sprintf("%s | %d | %s | %s | %s | %s | %s", name, count, "0", "0", "0", "0", "0"))
	}

	output = append(output, "-------- | -------- | -------- | -------- | -------- | -------- | --------")
	output = append(output, fmt.Sprintf("Total | %d | %d | %d | %d | %d | %d", sumFiles, sumLines, sumCode, sumComment, sumBlank, sumByte))
	output = append(output, "-------- | -------- | -------- | -------- | -------- | -------- | --------")

	result := columnize.SimpleFormat(output)
	fmt.Println(result)
}

//go:generate go run scripts/include.go
func main() {
	// A buffered channel that we can send work requests on.
	fileReadJobQueue := make(chan *FileJob, runtime.NumCPU()*20)
	fileProcessJobQueue := make(chan *FileJob, runtime.NumCPU())
	fileSummaryJobQueue := make(chan *FileJob, runtime.NumCPU()*20)

	// debug.SetGCPercent(-1) // This seems to make no difference for most....

	go walkDirectory("/home/bboyter/Projects/redis/", &fileReadJobQueue)
	go fileReaderWorker(&fileReadJobQueue, &fileProcessJobQueue)
	go fileProcessorWorker(&fileProcessJobQueue, &fileSummaryJobQueue)
	fileSummerize(&fileSummaryJobQueue) // Bring it all back to you

	fmt.Println("")
	// GitIgnore Processing
	gitignore, _ := gitignore.NewGitIgnore("./.gitignore")
	fmt.Println(gitignore.Match("./scc", false))
	fmt.Println(gitignore.Match("./LICENSE", false))
}
